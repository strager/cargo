window.SIDEBAR_ITEMS = {"enum":[["ActivateError",""],["ResolveBehavior","Resolver behavior, used to opt-in to new behavior that is backwards-incompatible via the `resolver` field in the manifest."],["ResolveVersion","A version to indicate how a `Cargo.lock` should be serialized."],["VersionOrdering",""]],"fn":[["activate","Attempts to activate the summary `candidate` in the context `cx`."],["activate_deps_loop","Recursively activates the dependencies for `summaries`, in depth-first order, backtracking across possible candidates for each dependency as necessary."],["check_cycles",""],["check_duplicate_pkgs_in_lockfile","Checks that packages are unique when written to lock file."],["find_candidate","Looks through the states in `backtrack_stack` for dependencies with remaining candidates. For each one, also checks if rolling back could change the outcome of the failed resolution that caused backtracking in the first place. Namely, if we’ve backtracked past the parent of the failed dep, or any of the packages flagged as giving us trouble in `conflicting_activations`."],["generalize_conflicting","Attempts to find a new conflict that allows a `find_candidate` feather then the input one. It will add the new conflict to the cache if one is found."],["resolve","Builds the list of all packages required to build the first argument."]],"mod":[["conflict_cache",""],["context",""],["dep_cache","There are 2 sources of facts for the resolver:"],["encode","Definition of how to encode a `Resolve` into a TOML `Cargo.lock` file"],["errors",""],["features","Feature resolver"],["resolve",""],["types",""],["version_prefs","This module implements support for preferring some versions of a package over other versions."]],"struct":[["BacktrackFrame",""],["EncodableDependency",""],["EncodablePackageId",""],["EncodableResolve","The `Cargo.lock` structure."],["RemainingCandidates","A helper “iterator” used to extract candidates within a current `Context` of a dependency graph."],["Resolve","Represents a fully-resolved package dependency graph. Each node in the graph is a package and edges represent dependencies between packages."],["ResolveError","Error during resolution providing a path of `PackageId`s."],["ResolveOpts","Options for how the resolve should work."],["VersionPreferences","A collection of preferences for particular package versions."]],"type":[["ActivateResult",""],["Metadata",""]]};