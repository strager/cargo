window.SIDEBAR_ITEMS = {"constant":[["DEFAULT_README_FILES",""]],"enum":[["MaybeWorkspace","Enum that allows for the parsing of `field.workspace = true` in a Cargo.toml"],["ProfilePackageSpec",""],["StringOrBool",""],["TomlDependency",""],["U32OrBool",""],["VecStringOrBool",""]],"fn":[["default_readme_from_package_root","Checks if a file with any of the default README file names exists in the package root. If so, returns a `String` representing that name."],["inheritable_from_path",""],["parse","Attempts to parse a string into a [`toml::Value`]. This is not specific to any particular kind of TOML file."],["parse_document",""],["read_manifest","Loads a `Cargo.toml` from a file on disk."],["read_manifest_from_str","Parse an already-loaded `Cargo.toml` as a Cargo manifest."],["readme_for_package","Returns the name of the README file for a [`TomlPackage`]."],["unique_build_targets","Checks a list of build targets, and ensures the target names are unique within a vector. If not, the name of the offending build target is returned."],["version_trim_whitespace",""],["warn_on_deprecated","Warn about paths that have been deprecated and may conflict."]],"mod":[["targets","This module implements Cargo conventions for directory layout:"]],"struct":[["Context",""],["DetailedTomlDependency",""],["InheritableFields","A group of fields that are inheritable by members of the workspace"],["IntermediateDependency",""],["PathValue",""],["StringOrVec","A StringOrVec can be parsed from either a TOML string or array, but is always stored as a vector."],["TomlDeError","Errors that can occur when deserializing a type."],["TomlEditError","Type representing a TOML parse error"],["TomlManifest","This type is used to deserialize `Cargo.toml` files."],["TomlOptLevel",""],["TomlPackage","Represents the `package`/`project` sections of a `Cargo.toml`."],["TomlPlatform","Corresponds to a `target` entry, but `TomlTarget` is already used."],["TomlProfile",""],["TomlProfiles",""],["TomlTarget",""],["TomlWorkspace",""],["TomlWorkspaceDependency",""],["TomlWorkspaceField",""]],"trait":[["ResolveToPath",""]],"type":[["TomlBenchTarget",""],["TomlBinTarget",""],["TomlExampleTarget",""],["TomlLibTarget",""],["TomlTestTarget",""]]};